using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ChaXun
{
    interface ILinearList<T>
    {
        void InsertNode(T a, int i);//插入操作
        void DeleteNode(int i);//删除操作
        T SearchNode(int i);//查找表元素
        T SearchNode(T value);//定位元素
        int GetLength();//求表长度
        void Clear();//清空操作
        bool IsEmpty();//判断线性表是否为空


    }
    class SeqList<T> : ILinearList<T>
    {
        private int maxsize;//顺序表的最大长度
        private T[] data;
        private int lenght;
        public int Lenght
        {
            get { return lenght; }
        }
        public T[] Date
        {
            get { return data; }
        }
        public int Maxsize
        {
            get { return maxsize; }
            set { maxsize = value; }
        }//初始化
        public SeqList(int size)
        {
            maxsize = size;
            data = new T[maxsize];
            lenght = 0;

        }
        public void InserNode(T a)
        {
            if (lenght == maxsize)
            {
                Console.WriteLine("List is full");
            }
            else
            {
                data[lenght] = a;
            }
            lenght++;
        }
        public void InsertNode(T a, int i)
        {
            if (lenght == maxsize)
            {
                Console.WriteLine("List is full");
            }
            else if (i < 1 || i > lenght + 1)
            {
                Console.WriteLine("Position is error!");
            }
            else
            {
                for (int j = lenght - 1; j >= i - 1; i--)
                {
                    data[j + 1] = data[j];
                }
                data[i - 1] = a;
            }
            lenght++;
        }
        //删除顺序表的第i个数据元素
        public void DeleteNode(int i)
        {
            if (IsEmpty())
            {
                Console.WriteLine("List is empty");
                return;
            }
            if (i < 1 || i > lenght)
            {
                Console.WriteLine("Position is error!");
                return;
            }
            for (int j = i; j < lenght; j++)
            {
                data[j - 1] = data[j];
            }
            lenght--;
        }
        //获得顺序表的第i个数据元素
        public T SearchNode(int i)
        {
            if (IsEmpty() || (i < 1) || (i > lenght))
            {
                Console.WriteLine("List is empty or Position is error!");
                return default(T);
            }
            return data[i - 1];
        }
        //在顺序表中查找值为value的数据元素
        public T SearchNode(T value)
        {
            if (IsEmpty())
            {
                Console.WriteLine("List is Empty!");
                return default(T);
            }
            int i = 0;
            for (i = 0; i < lenght; i++)
            {
                if (data[i].ToString().Contains(value.ToString()))
                {
                    break;
                }
            }
            if (i >= lenght)
            {
                return default(T);
            }
            return data[i];
        }
        //求顺序表的长度
        public int GetLength()
        {
            return lenght;
        }
        public void Clear()
        {
            lenght = 0;
        }
        //判断顺序表是否为空
        public bool IsEmpty()
        {
            if (lenght == 0)
                return true;
            else
                return false;
        }
        //判断顺序表是否为满
        public bool IsFull()
        {
            if (lenght == maxsize)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

    }
    class StuNode
    {
        private string stu_no;
        private string stu_name;
        private int stu_score;
        public string Stu_no
        {
            get { return stu_no; }
            set { stu_no = value; }
        }
        public string Stu_name
        {
            get { return stu_name; }
            set { stu_name = value; }
        }
        public int Stu_score
        {
            get { return stu_score; }
            set { stu_score = value; }
        }
        public StuNode(string stu_no, string stu_name, int stu_score)
        {
            this.stu_no = stu_no;
            this.stu_name = stu_name;
            this.stu_score = stu_score;
        }
        public override string ToString()
        {
            return stu_no + stu_name;
        }

        class Program
        {
            static void Main(string[] args)
            {
                char seleflag;
                ILinearList<StuNode> stuList = null;
                Console.WriteLine("数据结构类型为：顺序表");
                Console.WriteLine("请输入学生个数");
                int maxsize = Convert.ToInt32(Console.ReadLine());
                stuList = new SeqList<StuNode>(maxsize);
                //对学生成绩表进行操作
                while (true)
                {
                    Console.WriteLine("请输入操作选项");
                    Console.WriteLine("1、添加学生成绩");
                    Console.WriteLine("2、删除学生成绩");
                    Console.WriteLine("3、按姓名查询学生成绩");
                    Console.WriteLine("4、按学号查询学生成绩");
                    Console.WriteLine("5、按升序显示所有学生的成绩");
                    Console.WriteLine("6、按降序显示所有学生的成绩");
                    Console.WriteLine("7、退出");
                    seleflag = Convert.ToChar(Console.ReadLine());
                    switch (seleflag)
                    {
                        case '1':
                            {
                                char flag;
                                do
                                {
                                    string stu_no;
                                    string stu_name;
                                    int stu_score;
                                    Console.WriteLine("请输入学号");
                                    stu_no = Console.ReadLine();
                                    Console.WriteLine("请输入姓名");
                                    stu_name = Console.ReadLine();
                                    Console.WriteLine("请输成绩");
                                    stu_score = Convert.ToInt32(Console.ReadLine());
                                    StuNode newNode = new StuNode(stu_no, stu_name, stu_score);

                                    if (stuList.GetLength() == 0)
                                    {
                                        stuList.InsertNode(newNode, 1);

                                    }
                                    else if (newNode.Stu_score > (stuList.SearchNode(stuList.GetLength()).Stu_score))
                                    {
                                        stuList.InsertNode(newNode, stuList.GetLength() + 1);
                                    }
                                    else
                                    {
                                        for (int i = 1; i <= stuList.GetLength(); i++)
                                        {
                                            if (newNode.Stu_score <= (stuList.SearchNode(i).Stu_score))
                                            {
                                                stuList.InsertNode(newNode, i);
                                                break;
                                            }
                                        }
                                    }
                                    Console.WriteLine("还有学生要输入吗(Y/N)：");
                                    flag = Convert.ToChar(Console.ReadLine());
                                }
                                while (flag == 'Y');
                                break;
                            }
                        //按学号删除学生成绩
                        case '2':
                            {
                                StuNode temp;
                                Console.WriteLine("输入要删除学生的学号：");
                                string stu_no = Console.ReadLine();
                                for (int i = 1; i <= stuList.GetLength(); i++)
                                {
                                    temp = stuList.SearchNode(i);
                                    if (temp.Stu_no == stu_no)
                                    {
                                        stuList.DeleteNode(i);
                                        break;
                                    }
                                }
                                break;
                            }
                        //按姓名查询学生成绩
                        case '3':
                            {
                                StuNode temp;
                                Console.WriteLine("输入要查询学生的姓名");
                                string stu_name = Console.ReadLine();
                                for (int i = 1; i <= stuList.GetLength(); i++)
                                {
                                    temp = stuList.SearchNode(i);
                                    if (temp.Stu_name == stu_name)
                                    {
                                        Console.WriteLine("{0}的成绩是：{1}", stu_name, temp.Stu_score);
                                        break;
                                    }
                                }
                                break;
                            }
                        //按学号查询成绩
                        case '4':
                            {
                                StuNode temp;
                                Console.WriteLine("输入要查询的学号");
                                string stu_no = Console.ReadLine();
                                for (int i = 1; i <= stuList.GetLength(); i++)
                                {
                                    temp = stuList.SearchNode(i);
                                    if (temp.Stu_no == stu_no)
                                    {
                                        Console.WriteLine("学号为{0}的成绩是：{1}", stu_no, temp.Stu_score);
                                        break;
                                    }
                                }
                                break;
                            }
                        //按升序显示所有学生的成绩
                        case '5':
                            {
                                StuNode temp = null;
                                for (int i = 1; i <= stuList.GetLength(); i++)
                                {
                                    temp = stuList.SearchNode(i);
                                    Console.WriteLine("t{0}\t{1}\t{2}", temp.Stu_no, temp.Stu_name, temp.Stu_score);
                                }
                            }
                            break;
                        //按降序显示所有学生成绩
                        case '6':
                            {
                                StuNode temp = null;
                                for (int i = stuList.GetLength(); i >= 1; i--)
                                {
                                    temp = stuList.SearchNode(i);
                                    Console.WriteLine("学号{0} \t姓名{1}\t成绩{2}", temp.Stu_no, temp.Stu_name, temp.Stu_score);
                                }
                            }
                            break;
                        case '7':
                            {
                                return;
                            }

                    }
                }
            }
        }
    }
}